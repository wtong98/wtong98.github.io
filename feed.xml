<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/_site/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/_site/" rel="alternate" type="text/html" /><updated>2019-12-28T13:50:22-06:00</updated><id>http://localhost:4000/_site/feed.xml</id><title type="html">william + lettuce + tongmato</title><subtitle>Doodling in my little corner of the web</subtitle><author><name>William L. Tong</name></author><entry><title type="html">Everything you need to know about webtech</title><link href="http://localhost:4000/_site/tech/2019/12/28/everything-you-need-to-know-about-webtech.html" rel="alternate" type="text/html" title="Everything you need to know about webtech" /><published>2019-12-28T13:25:00-06:00</published><updated>2019-12-28T13:25:00-06:00</updated><id>http://localhost:4000/_site/tech/2019/12/28/everything-you-need-to-know-about-webtech</id><content type="html" xml:base="http://localhost:4000/_site/tech/2019/12/28/everything-you-need-to-know-about-webtech.html">&lt;p&gt;React, Angular, ES6 Javascript, Typescript, JS-in-CSS, Express, Django, NoSQL,
ORMs – webtech is a dizzying world with diverse technologies, wacky lingo, and
more frameworks than stars in the sky. Looking for a way in? You just found it.&lt;/p&gt;

&lt;p class=&quot;intro&quot;&gt;&lt;em&gt;Audience: burgeoning programmers looking for an intro to webtech&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/everything-you-need-to-know-about-webtech/internet.jpg&quot; alt=&quot;Source: https://askleo.askleomedia.com/wp-content/uploads/2018/10/internet.jpg&quot; /&gt;
    &lt;figcaption&gt;Source: https://askleo.askleomedia.com/wp-content/uploads/2018/10/internet.jpg&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Webtech&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; is a &lt;em&gt;monster&lt;/em&gt;. The barrier to entry is high for a number of reasons:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Lightning pace&lt;/strong&gt;: technologies popular three years ago
are already becoming obsolete&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Informal training&lt;/strong&gt;: teaching something that changes this fast is challenging.
Most of the education happens on the job or via blog tutorials (like this one!)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sheer volume&lt;/strong&gt;: the raw number of tools, packages, and frameworks for modern
web development is overwhelming&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But that’s why posts like this exist. Whether you’re a casual programmer or
thinking of a career in web dev, you’ve made it to the right place.&lt;/p&gt;

&lt;h3 id=&quot;internet&quot;&gt;Internet&lt;/h3&gt;
&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/everything-you-need-to-know-about-webtech/arpanet.jpg&quot; alt=&quot;Source: http://mercury.lcs.mit.edu/~jnc/tech/arpageo.html&quot; /&gt;
    &lt;figcaption&gt;Source: http://mercury.lcs.mit.edu/~jnc/tech/arpageo.html&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Open your favorite browser. Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt;. Hit enter.&lt;/p&gt;

&lt;p&gt;The moment your finger brushes the key, your laptop’s wireless card sends a beam
of light&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; encoding information like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1:25 pm&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I am
coming from Jane's laptop&lt;/code&gt; to a tiny computer in your home/office called a
router. The router then transmits the information as electrical impulses through
a tangle of cables to a supercomputer. Depending on where you live and the location
of the nearest Google servers, these electrical impulses will get rocketed around
the country, potentially under the ocean, until they arrive at last to routers
owned by Google. From here, they feed to a Google computer, which interprets
the information, assembles the Google search page, and sends that data back
through the routers, tangle of cables, supercomputers, and finally the router
in your home or office, where it can be beamed back to your laptop as light –
and lo! Google search appears on your screen.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;If this whole process sounds immensely cool and complicated, it is. Check out
&lt;a href=&quot;https://www.vox.com/a/internet-maps&quot;&gt;this article&lt;/a&gt; from Vox with impressive
graphics about the whole process.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Most of this process lies in the realm of telecom giants and hardcore engineers.
For the software geeks, there’s only one part that really matters: assembling
the page. All the hard stuff – getting the users’ signals to your computer, sending
your page out to users – is handled by the Internet. The real work for us
is figuring out how to make that page in the first place.&lt;/p&gt;

&lt;h3 id=&quot;web-stack&quot;&gt;Web stack&lt;/h3&gt;
&lt;p&gt;That page – which I’ll now call a web application – requires three parts:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Frontend: what the user sees&lt;/li&gt;
  &lt;li&gt;Backend: data and logic powering the web app&lt;/li&gt;
  &lt;li&gt;Server: software that glues everything together&lt;/li&gt;
&lt;/ol&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/everything-you-need-to-know-about-webtech/frontend_backend.png&quot; alt=&quot;Source: https://www.seobility.net/en/wiki/Frontend&quot; /&gt;
    &lt;figcaption&gt;Source: https://www.seobility.net/en/wiki/Frontend&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;small-skip&quot;&gt;A world of technology goes into building these three components. Software
engineers then pick their favorite and assemble them into a &lt;a href=&quot;https://whatis.techtarget.com/definition/Web-stack&quot;&gt;web stack&lt;/a&gt;.
For example, a traditional choice is to pick &lt;b&gt;L&lt;/b&gt;inux and &lt;b&gt;A&lt;/b&gt;pache for the server,
&lt;b&gt;M&lt;/b&gt;ySQL and &lt;b&gt;P&lt;/b&gt;HP for the backend, and more PHP for the frontend. The
&lt;a href=&quot;https://en.wikipedia.org/wiki/LAMP_(software_bundle)&quot;&gt;LAMP&lt;/a&gt; stack. Let’s walk
through each part in greater detail below:&lt;/p&gt;

&lt;h4 id=&quot;frontend&quot;&gt;Frontend&lt;/h4&gt;
&lt;p&gt;Arguably the gnarliest part of the whole stack, the frontend governs everything
the user sees, touches, and hears. Everything you interact with directly on the
Internet lies in the realm of frontend.&lt;/p&gt;

&lt;p&gt;Three core technologies to know:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/html/&quot;&gt;HTML&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/css/&quot;&gt;CSS&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.w3schools.com/js/&quot;&gt;Javascript&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;HTML&lt;/strong&gt; (short for Hypertext Markup Language) describes the structure of a
webpage. It looks something like this:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;strong&amp;gt;&lt;/span&gt;HTML&lt;span class=&quot;nt&quot;&gt;&amp;lt;/strong&amp;gt;&lt;/span&gt; describes the structure of a webpage.
    It looks something like this:
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The funny-looking sections enclosed in angle brackets are called &lt;em&gt;tags&lt;/em&gt;. They
denote sections of an HTML document. For example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;p&amp;gt;&lt;/code&gt; denotes the beginning
of a paragraph, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;/p&amp;gt;&lt;/code&gt; denotes the end. Closing tags always include the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;
between the brackets. The tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; denotes really important text, which
should be emphasized. To view the HTML of this webpage, you can right-click
on the page and select “View page source.”&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CSS&lt;/strong&gt; (short for Cascading Style Sheet) describes how a webpage should look.
It looks like this:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;blue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This snippet means that the text color for all paragraphs should be blue. You
can use CSS to stylize just about any visual element on your webpage, from the
color to the spacing to the placement, and even animations. Whereas HTML
gives you content and structure, CSS gives you visuals.&lt;/p&gt;

&lt;p&gt;Just HTML + CSS is enough to build a decent webpage. But for the fancy stuff
like &lt;a href=&quot;http://weavesilk.com/&quot;&gt;this&lt;/a&gt;, you’ll need &lt;strong&gt;JavaScript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;JavaScript is a fully-fledged programming language.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Webpages rely on them
for animation, logic, interfaces, basically anything a general programming
language can do. In fact, JavaScript is so powerful that some websites are built
purely from it. No HTML. No CSS. Pure JavaScript. It’s a large topic and
deserving of its own post.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;JavaScript, by the way, has nothing to do with &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_(programming_language)&quot;&gt;Java&lt;/a&gt;.
The name was chosen for hype, back when Java was all the rage. But nowadays
Java has about as much relation to JavaScript as “car” to “carpet.”&lt;/p&gt;

&lt;h4 id=&quot;backend&quot;&gt;Backend&lt;/h4&gt;
&lt;p&gt;For a lot of websites (like this one), the frontend is all you need. But if
you want a higher degree of interaction with your users – like a
browser-based video game, web email, online gradebook, basically anything that
requires you to log on – you’ll also need a backend.&lt;/p&gt;

&lt;p&gt;The primary job of the backend is to host a &lt;strong&gt;database&lt;/strong&gt;. A database is a
collection of structured information. Think Excel, but with multiple spreadsheets
that connect to each other. Using it, you might store usernames, passwords,
favorite color, preferred pizza parlor, opinion on bananas vs plantains, virtually
any data you’d like. A popular database is &lt;a href=&quot;https://en.wikipedia.org/wiki/MySQL&quot;&gt;MySQL&lt;/a&gt;,
and it uses a special querying language called &lt;a href=&quot;https://www.w3schools.com/sql/&quot;&gt;SQL&lt;/a&gt;
to store and retrieve information.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/everything-you-need-to-know-about-webtech/database.jpg&quot; alt=&quot;A stylized database schema. Source: https://www.cbronline.com&quot; /&gt;
    &lt;figcaption&gt;A stylized database schema. Source: https://www.cbronline.com&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The rest of the backend includes code that connects the database to the rest of
the website. Suppose your website orders pizza from a user’s favorite pizza
parlor. Then once the user hits “Order!” your backend might query the database,
discover that the user likes “Pizza Hut,” connect to Pizza Hut’s online ordering
system, and submit an order for a large pepperoni with extra cheese.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;The code itself can be written in virtually any popular programming language.
Traditionally, the choice is &lt;a href=&quot;https://www.w3schools.com/php/&quot;&gt;PHP&lt;/a&gt;, but no
modern website will touch it. Other common choices include (in my personal
order of preference) Java, &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Python&lt;/a&gt;, and even
&lt;a href=&quot;https://nodejs.org/en/&quot;&gt;JavaScript&lt;/a&gt; itself. But if you’re a hardcore disciple
of SomeObscureLanguage, chances are, someone somewhere has written a package
that lets you use it for a backend.&lt;/p&gt;

&lt;h4 id=&quot;server&quot;&gt;Server&lt;/h4&gt;
&lt;p&gt;Often paired with the backend, the server is a piece of software that connects
users to the actual website.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; Its primary job is to direct traffic: when
a user types &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;google.com&lt;/code&gt; and hits enter, servers at Google receive that
request, give it to the backend to process, and return the assembled
webpage to the user.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;In practice, the server is not something a web developer touches directly.
Instead, clever people have already written multitudes of servers ready
for you to plug-and-play. The traditional go-to has been
&lt;a href=&quot;https://httpd.apache.org/&quot;&gt;Apache&lt;/a&gt;, though a popular option today is &lt;a href=&quot;https://www.nginx.com/&quot;&gt;nginx&lt;/a&gt;
(pronounced like “engine - X”).&lt;/p&gt;

&lt;h3 id=&quot;frameworks&quot;&gt;Frameworks&lt;/h3&gt;
&lt;p&gt;And that’s about it! Those three building blocks – frontend, backend, server –
form the core of any web project. The rest of webtech is an endless elaboration
on these three themes.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;One last thing to talk about is the &lt;strong&gt;web framework&lt;/strong&gt;. Take a look at these
two websites:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.taco.com/&quot;&gt;TACO&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/everything-you-need-to-know-about-webtech/taco.png&quot; alt=&quot;A very old-fashioned, 90s era website. Likely written by hand
    with traditional HTML and CSS techniques.&quot; /&gt;
    &lt;figcaption&gt;A very old-fashioned, 90s era website. Likely written by hand
    with traditional HTML and CSS techniques.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;small-skip&quot;&gt;&lt;a href=&quot;http://www.feedmusic.com/&quot;&gt;Feed&lt;/a&gt;&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/everything-you-need-to-know-about-webtech/feed.png&quot; alt=&quot;Beautifully animated, sleek, modern website.&quot; /&gt;
    &lt;figcaption&gt;Beautifully animated, sleek, modern website.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;small-skip&quot;&gt;Imagine trying to write the website for Feed by hand using plain HTML, CSS, and
JavaScript. It’s doable, but doable in the same sense that building the Great
Wall of China brick-by-brick is doable.&lt;/p&gt;

&lt;p&gt;To build something beautiful, interactive, and &lt;em&gt;modern&lt;/em&gt;, you need a framework.
These are software packages that in some way make your life easier when
building a website. Some help structure your project. Others provide starting
templates. Many blur the line between frontend, backend, and server, providing
one complete solution that encompasses all parts.&lt;/p&gt;

&lt;p&gt;Each framework is itself the topic of a whole post. Below is a short overview of
some popular ones, plus my unsolicited opinions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;: frontend framework that helps your write beautiful web apps. It
does away entirely with HTML (and often CSS) and allows you to code the whole
thing in JavaScript. The project is headed by Facebook, and &lt;a href=&quot;https://facebook.com&quot;&gt;facebook.com&lt;/a&gt;
is an excellent example of a website built with React.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://angular.io/&quot;&gt;Angular&lt;/a&gt;: also a frontend framework, it’s a primary competitor to React
made by Google. Personally, I’m not a huge fan. It’s clunky, finicky, and
difficult to learn. If you have the choice, I recommend React.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt;: backend framework for JavaScript. Often
you’ll find it in a MERN stack: MongoDB (database) + Express + React + Node (JavaScript engine).&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;: backend framework for Python.
It’s got a little bit of everything you might need to build an enterprise-grade
website.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://flask.palletsprojects.com/en/1.1.x/&quot;&gt;Flask&lt;/a&gt;: a competitor to Django.
Whereas Django gives you everything, including an opinionated way to organize
your project, Flask takes a leaner, simpler, minimalist approach. They say
if Django is the Navy, then Flask is the pirates.&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;big-skip&quot;&gt;If you’re curious, this website is built using &lt;a href=&quot;/tech/2019/01/04/getting-started-with-jekyll.html&quot;&gt;Jekyll&lt;/a&gt;.
It’s a blog-oriented framework that crunches text files containing my posts into
the web pages you see now.&lt;/p&gt;

&lt;h4 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h4&gt;
&lt;p&gt;Some extra tidbits to color your reading experience:&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;

      &lt;p&gt;I use the term “webtech” to broadly cover everything related to building
a web page or web-based application. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;

      &lt;p&gt;In fact, it’s the same kind of light that your microwave uses on leftovers.
Check out &lt;a href=&quot;https://scienceblogs.com/builtonfacts/2009/09/17/wifi-and-radiation&quot;&gt;this interesting article&lt;/a&gt;
for more information. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;

      &lt;p&gt;Remember, all this happens on the order of seconds. And it has to happen
every time you click on a link, browse to a new page, or generally use
the Internet. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;

      &lt;p&gt;For more on programming languages themselves, check out my
&lt;a href=&quot;http://localhost:4000/tech/2019/02/22/programming-for-n00bs-an-introduction-to-our-craft.html&quot;&gt;guide to programming&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;

      &lt;p&gt;Sometimes, people refer to the “server” as the physical machine that runs
your backend code. In this article, I refer to “server” exclusively in
the software sense. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;

      &lt;p&gt;Except built-in support for asynchronous Python, in which case you’ll
need &lt;a href=&quot;http://www.celeryproject.org/&quot;&gt;Celery&lt;/a&gt; and a message broker like
&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt;. The extra bulk is why I prefer
JavaScript, which has async built in. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>William L. Tong</name></author><category term="education" /><summary type="html">React, Angular, ES6 Javascript, Typescript, JS-in-CSS, Express, Django, NoSQL, ORMs – webtech is a dizzying world with diverse technologies, wacky lingo, and more frameworks than stars in the sky. Looking for a way in? You just found it. Audience: burgeoning programmers looking for an intro to webtech</summary></entry><entry><title type="html">Smile.</title><link href="http://localhost:4000/_site/personal/2019/08/26/smile.html" rel="alternate" type="text/html" title="Smile." /><published>2019-08-26T12:36:54-05:00</published><updated>2019-08-26T12:36:54-05:00</updated><id>http://localhost:4000/_site/personal/2019/08/26/smile</id><content type="html" xml:base="http://localhost:4000/_site/personal/2019/08/26/smile.html">&lt;p&gt;Sometimes, it’s just been a bad day.&lt;/p&gt;

&lt;p class=&quot;intro&quot;&gt;&lt;em&gt;Audience: everyone&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/smile/dark_forest.jpg&quot; alt=&quot;Source: https://www.pinterest.com/pin/94364554676402286/&quot; /&gt;
    &lt;figcaption&gt;Source: https://www.pinterest.com/pin/94364554676402286/&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Smile.&lt;/p&gt;

&lt;p&gt;Go ahead, do it. Right here. Right now.&lt;/p&gt;

&lt;p&gt;Feel the corners of your mouth rise, your cheeks tighten, your eyes crinkle.
Maybe flash a little teeth, if you’re feeling good.&lt;/p&gt;

&lt;p&gt;Hold it for a few seconds.&lt;/p&gt;

&lt;p&gt;Deep breath.&lt;/p&gt;

&lt;p&gt;And relax, but see if you can keep a small smile resting on your lips.&lt;/p&gt;</content><author><name>William L. Tong</name></author><category term="curio" /><summary type="html">Sometimes, it’s just been a bad day. Audience: everyone</summary></entry><entry><title type="html">Programming for n00bs: an introduction to our craft</title><link href="http://localhost:4000/_site/tech/2019/02/22/programming-for-n00bs-an-introduction-to-our-craft.html" rel="alternate" type="text/html" title="Programming for n00bs: an introduction to our craft" /><published>2019-02-22T20:05:54-06:00</published><updated>2019-02-22T20:05:54-06:00</updated><id>http://localhost:4000/_site/tech/2019/02/22/programming-for-n00bs-an-introduction-to-our-craft</id><content type="html" xml:base="http://localhost:4000/_site/tech/2019/02/22/programming-for-n00bs-an-introduction-to-our-craft.html">&lt;p&gt;If you’ve always wanted to learn how to program, but never know where to start,
you’re in the right place. Start here. Today is the first day of your
glorious programming future.&lt;/p&gt;

&lt;p class=&quot;intro&quot;&gt;&lt;em&gt;Audience: curious folks interested in programming&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/programming-for-n00bs/intro_to_programming.jpg&quot; alt=&quot;Source: https://www.lynda.com/Programming-Foundations-tutorials&quot; /&gt;
    &lt;figcaption&gt;Source: https://www.lynda.com/Programming-Foundations-tutorials&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There’s a common myth that programming is polarizing. You either get it or you
don’t.&lt;/p&gt;

&lt;p&gt;Lies.&lt;/p&gt;

&lt;p&gt;Here’s more falsehood: you need to be super smart to learn how to program. Only
geeks like programming. Women are rare in this field. You’re too old to learn
programming. You’re too young to learn programming.&lt;/p&gt;

&lt;p&gt;Anyone — and I mean &lt;em&gt;anyone&lt;/em&gt; — can learn how to program.&lt;/p&gt;

&lt;p&gt;It’s easy. It’s fun. Sure, you can make a lot of money — but to be honest,
no one I know who’s serious about programming is here for $$$.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; It’s a
genuinely meaningful activity. There’s creativity, imagination, a chance
to sprinkle your thoughts in a text file and watch it spring to life.&lt;/p&gt;

&lt;p&gt;In this two-part guide, I will give you the tools (and ideally the mindset) to
begin your programming journey. This first part focuses on the basic skills to
start. The second part dives deeper into the craft.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Whether you’re hoping to pick up a new hobby or gunning for a software
engineering future, this is the perfect place to begin.&lt;/p&gt;

&lt;h3 id=&quot;big-picture-stuff&quot;&gt;Big picture stuff&lt;/h3&gt;
&lt;p&gt;At it’s most general, computer programming is the art of writing instructions.&lt;/p&gt;

&lt;p&gt;Two keywords here: &lt;strong&gt;art&lt;/strong&gt;. And &lt;strong&gt;instructions&lt;/strong&gt;. Let’s start with the sexier
term: instructions.&lt;/p&gt;

&lt;p&gt;In a very real sense, programming is no different than writing a grocery list of
goodies you want your spouse to pick up. It’s no different than scribbling a
note to your mom, telling her what to get from Subway, or jotting down
a cooking recipe to remember for later.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;But instead of your spouse, Mom, or your future self, the audience for our
particular instructions are &lt;a href=&quot;https://wlt.soy/tech/curio/2019/01/12/from-1011-to-laptop-how-to-build-a-computer-from-binary.html&quot;&gt;computers&lt;/a&gt;.
Computers don’t speak English (&lt;a href=&quot;https://towardsdatascience.com/an-easy-introduction-to-natural-language-processing-b1e2801291c1&quot;&gt;yet&lt;/a&gt;)
so it’s up to the programmer to learn their language. That’s the easy part,
and the part we’ll focus on in this guide.&lt;/p&gt;

&lt;p&gt;The other side, &lt;em&gt;art&lt;/em&gt;, is trickier to tap. There’s an art to writing
code, just as there’s an art to writing prose. Good code tends to look good,
&lt;em&gt;feel&lt;/em&gt; good. It’s aesthetic. Expressive. So damn clean you can eat off it. It’s
hard to get into the details without first learning some, so we’ll come back
to this concept in part II.&lt;/p&gt;

&lt;p&gt;But the biggest thing I want you to keep in mind moving forward is this:
&lt;strong&gt;programming is possible&lt;/strong&gt;. Sometimes, it’ll seem hard. Sometimes, it’ll seem
impossible. Sometimes, you’ll want to smash a hole through your laptop because
nothing seems to work right. Don’t. You can do it. And more importantly, laptops
are expensive.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Programming requires a different mindset than what you may be used to. It takes
time to sink in. Give it a shot, and if it doesn’t make sense, leave it to cook
on the back-burners for a little while and come back later. I promise you won’t
regret it.&lt;/p&gt;

&lt;h3 id=&quot;setting-up&quot;&gt;Setting up&lt;/h3&gt;
&lt;p&gt;Setting up is the hardest part of the journey. Everyone’s machine will be a
little different. The instructions I give will try to be general enough to get
everyone, but you might have a really cranky laptop that just isn’t feeling it.
In that case, Google and &lt;a href=&quot;https://stackoverflow.com/&quot;&gt;Stack Overflow&lt;/a&gt; will be
your best bet.&lt;/p&gt;

&lt;p&gt;The single most important thing you’ll need is a terminal. Fortunately, your
computer should come equipped with one. Unfortunately, they’ll all be a little
different depending on your operating system.&lt;/p&gt;

&lt;p&gt;If you’re running &lt;strong&gt;Windows&lt;/strong&gt;, you have three options:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;cmd&lt;/li&gt;
  &lt;li&gt;PowerShell&lt;/li&gt;
  &lt;li&gt;Windows Subsystem for Linux&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first two come with Windows. Open up your applications menu or search box,
and you’ll find them.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/programming-for-n00bs/powershell.webp&quot; alt=&quot;Source: https://www.digitalcitizen.life/ways-launch-powershell-windows-admin&quot; /&gt;
    &lt;figcaption&gt;Source: https://www.digitalcitizen.life/ways-launch-powershell-windows-admin&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;However, if you don’t mind installing a little extra gear, I recommend option 3.
To get it, open up your Windows Store app, search for &lt;a href=&quot;https://www.microsoft.com/en-us/p/ubuntu/9nblggh4msv6?activetab=pivot:overviewtab&quot;&gt;Ubuntu on Windows&lt;/a&gt;, and
install it. This application isn’t a simple terminal, but will emulate a whole
operating system (Linux) for you. Using it will allow you to follow the rest of
this guide with minimal headaches.&lt;/p&gt;

&lt;p&gt;If you prefer to stick with the native Windows options, I’d take PowerShell.
It’s far more advanced, and will play nicer with the instructions I will shortly
give for using your terminal. If, for some reason, you’re married to cmd,
you’re on your own, but you can learn more about it &lt;a href=&quot;https://www.lifewire.com/command-prompt-2625840&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you’re running &lt;strong&gt;macOS&lt;/strong&gt;, things are a lot simpler. The terminal is called
“Terminal” (go figure) and is easily searchable with Spotlight (ctrl + spacebar).&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;And if you’re running a flavor of &lt;strong&gt;Linux&lt;/strong&gt;, terminals will differ between distros,
but you’re likely proficient enough anyway to know how to use one.&lt;/p&gt;

&lt;p&gt;Next, you’ll need a text editor. It’s a program that allows you to write text
into files, and it’s the Swiss Army Knife of coding. Most computers will
have ones built-in, but you’ll need something with a little more power than
Notepad to do proper work.&lt;/p&gt;

&lt;p&gt;My personal favorite is &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt;. It’s slick. Hackable. Easy.
And I’m using it right now to write this post.&lt;/p&gt;

&lt;p&gt;If you’re willing to shell out some cash, another popular editor is
&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime&lt;/a&gt;. It’s an industry favorite, but comes
with a hefty price tag. Why pay when Atom is just as excellent, and free?&lt;/p&gt;

&lt;p&gt;And for the hard-core, there’s &lt;a href=&quot;https://www.vim.org/&quot;&gt;Vim&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/programming-for-n00bs/vim_curve.jpg&quot; alt=&quot;Source: https://stackoverflow.com/questions/10942008/what-does-emacs-learning-curve-actually-look-like&quot; /&gt;
    &lt;figcaption&gt;Source: https://stackoverflow.com/questions/10942008/what-does-emacs-learning-curve-actually-look-like&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It’s infamous for being tough to learn. But master it’s wizardry, and you’ll
blaze with obscene speed. If you’re prepared for an epic challenge,
&lt;a href=&quot;https://danielmiessler.com/study/vim/&quot;&gt;here&lt;/a&gt; is my favorite tutorial for the
editor.&lt;/p&gt;

&lt;p&gt;Take some time to learn your chosen editor. They’re often geared towards
programming, but you can use them for just about anything word-related. Write
your essays with them, if you’d like. Compose poetry.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Once you’re ready, let’s sink our teeth into some serious work.&lt;/p&gt;

&lt;h3 id=&quot;shell&quot;&gt;Shell&lt;/h3&gt;
&lt;p&gt;A terminal is a special environment that runs a program called a &lt;em&gt;shell&lt;/em&gt;. In
the old days, a terminal was a physical device attached to a computer. Today,
you can access one through a window on your screen.&lt;/p&gt;

&lt;p&gt;A shell is a special kind of program that launches other programs. You’re
running a shell right now. On Windows, it’s called “Windows shell,” and it’s
the familiar environment you use to interact with your computer. The desktop.
File explorer. Login window. All of it is part of the shell. Using it, you
can double-click on an icon to launch a program.&lt;/p&gt;

&lt;p&gt;But the kinds of shells we’re interested in are called “command-line shells,”
or sometimes “command-line interface” (CLI). Whereas the Windows shell is
&lt;em&gt;graphical&lt;/em&gt;, CLI’s are &lt;em&gt;text-based&lt;/em&gt;. There are no fancy desktops. No
icons. No clicking. To launch a program, you type its name and hit enter. From
here on out, when I use the word “shell,” I’m referring to these text-based
versions.&lt;/p&gt;

&lt;p&gt;PowerShell and Mac’s Terminal are terminals that run these text-based shells.
Open one right now, and here’s what you might see:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/programming-for-n00bs/my_terminal.png&quot; alt=&quot;Source: me&quot; /&gt;
    &lt;figcaption&gt;Source: me&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Yours will likely look a little different, but the basic gist should be the
same: a blinking cursor in front of a prompt. Try typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; and hit
enter. Mine looks like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/programming-for-n00bs/my_terminal_ls.png&quot; alt=&quot;Source: me&quot; /&gt;
    &lt;figcaption&gt;Source: me&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Yours will differ, depending on the files in your system. To save myself some
space, I can also use a convention to write the output like this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;a_directory/    another_directory/  file.txt    also_a_file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The “$” represents the prompt. A line without “$” signifies output.&lt;/p&gt;

&lt;p&gt;So what just happened?&lt;/p&gt;

&lt;p&gt;Unlike a graphical shell, where we can double-click an icon
to launch a program, to launch a program in our text-based shell, we need to
type the name and hit enter.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;In the example above, we launched a program called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, short for
“list files.” To understand what this means, let’s talk about files and
directories.&lt;/p&gt;

&lt;h3 id=&quot;files-and-directories&quot;&gt;Files and Directories&lt;/h3&gt;
&lt;p&gt;The data in your laptop are organized into files and directories — “directory,”
by the way, is another word for “folder.” CS folks just prefer “directory” for
reasons of taste and style.&lt;/p&gt;

&lt;p&gt;If you open your file explorer, you’ll see a bunch of them. Here’s what I
see:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/programming-for-n00bs/nautilus.png&quot; alt=&quot;Source: me&quot; /&gt;
    &lt;figcaption&gt;Source: me&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Files are blobs of data collected in place. In the example above, there are
two text files. They don’t have to be just text. Laying around my computer,
I’ve got images, music, video, PDFs, programs — all are files.&lt;/p&gt;

&lt;p&gt;Directories are special structures that hold other files and directories. In
the image above, there are two directories marked by little folder
icons. In your file explorer, you might be able to double-click a directory
to open, and see what’s inside.&lt;/p&gt;

&lt;p&gt;Every file and directory in your computer is housed in the &lt;em&gt;root directory&lt;/em&gt;.
It’s a humongous directory that contains everything else. In Windows, it’s
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&lt;/code&gt;. In macOS or Linux, it’s simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Every file and directory also has an address, called a &lt;em&gt;path&lt;/em&gt;. A path is a
string of directory names leading to the location of a particular file
or directory. The path to the root directory would simply be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt; (assuming
we’re using a Mac or Linux). If we had a directory called “home” within the
root directory, its path would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home&lt;/code&gt;. Inside the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt; directory, we
might have another directory called “wlt.” It’s path would be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/wlt&lt;/code&gt;.
Inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlt&lt;/code&gt;, if we had a text file called “sample.txt,” its path would be
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/wlt/sample.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Windows’ paths look a little different. Instead of beginning with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, the
root directory on Windows is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\&lt;/code&gt;. Instead of forward slashes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;, Windows uses
backslashes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\&lt;/code&gt; to separate directory names. Our example on Windows would look
like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\home\wlt\sample.txt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Return to your terminal, type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt;, and hit enter. I get:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/home/wlt/example
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt; stands for “print working directory.” Your terminal squats in a directory
when executing commands, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt; prints the path to this directory. In this
case, we’re sitting in a directory called “example” that’s nested within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wlt&lt;/code&gt;,
which in turn is nested within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;home&lt;/code&gt;, which is located in the root directory.&lt;/p&gt;

&lt;p&gt;Remember from before, the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;? When it executes, it lists the files
in your current working directory. So when I did:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;a_directory/    another_directory/  file.txt    also_a_file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m listing files in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example&lt;/code&gt;. The path to the directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_directory&lt;/code&gt; would be
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/wlt/example/a_directory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A note on terminology, when talking about paths, we were really talking about
&lt;em&gt;absolute paths&lt;/em&gt;. An absolute path is one that describes the chain of
directories starting from the root directory.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Alternatively, a &lt;em&gt;relative path&lt;/em&gt; is a path described from the current working directory.
For example, located in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;example&lt;/code&gt;, the absolute path to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; is
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/wlt/example/file.txt&lt;/code&gt;, but its relative path would simply be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt;,
because the file is located directly in our current working directory. If
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; were located in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_directory&lt;/code&gt;, it’s relative path would instead
be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_directory/file.txt&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;simple-commands&quot;&gt;Simple commands&lt;/h3&gt;
&lt;p&gt;Now that we have a handle on the file system, we can start learning basic
commands with the terminal.&lt;/p&gt;

&lt;p&gt;Remember that a command is nothing more than a simple program, like Microsoft
Word or your Internet browser. To execute a program in a shell, you simply have
to type its name and hit enter. Try it:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;notepad
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you’re on Windows, that command should have launched your Notepad text
editor. If you’re on Mac or Linux, try this instead:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This command launches the Vim text editor (or it’s predecessor, vi) To exit,
type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:q&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To customize how a command behaves, you can add additional &lt;em&gt;options&lt;/em&gt;. These
are basically extra words or letters we can tag to the end of commands for
bonus functionality. For example, recall from before we can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to list the
contents of our current working directory.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;a_directory/    another_directory/  file.txt    also_a_file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I wanted a little more information about each file, I can do:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
drwxr-xr-x 2 wlt wlt 4096 Feb  3  5:58  a_directory/
drwxr-xr-x 2 wlt wlt 4096 Feb  2  19:40 another_directory/
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 wlt wlt  156 Jan 30  8:01  also_a_file.txt
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 wlt wlt   38 Feb  1  12:52 file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-l&lt;/code&gt; option stands for “long,” and it tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; to list extra details about
each file. Options will usually be preceded by a dash &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; or sometimes two
if the option is in “long form,” i.e. typed out as in something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--color&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Related to options, many commands take &lt;em&gt;arguments&lt;/em&gt;. These are targets that a
command acts on, and are often appended to the very end of a command. For
example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt; can take an argument that specifies what file exactly to list:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; a_directory
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 wlt wlt  5 Feb  5 20:07 deep_magic.txt
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 wlt wlt 12 Feb  5 20:07 stuff.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that I’ve used the option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-l&lt;/code&gt; again, giving us the long form of the data.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;It’s also nifty to note that most terminals offer tab-completion. It allows you
to type a partial name, then press tab to quickly fill out the rest. In typing the
above command, for example, I simply typed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l a_dir&lt;/code&gt; then pressed tab. Magic!&lt;/p&gt;

&lt;p&gt;Another nifty command to learn is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;, which stands for “change directory.”&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
It changes your current working directory to a different one. To use it,
you specify your target directory as an argument. So if I do:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;a_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m now located in the directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_directory&lt;/code&gt;. I could’ve also specified
absolute paths:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# with an absolute path:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /home/wlt/example/a_directory

&lt;span class=&quot;c&quot;&gt;# with a relative path:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;a_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;There’s a special file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt; (two periods) in every single directory
that links to the directory above. If I &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it, I change my current
directory to the one above. For example:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;a_directory
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..
&lt;span class=&quot;c&quot;&gt;# I'm back where I started!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can chain together &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt;’s to rise multiple levels up the hierarchy at once:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/home/wlt/example
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../..
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
/home
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s another special symbol called a tilde &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt;. It should be on the
upper left-hand side of your keyboard. The tilde represents your &lt;em&gt;home directory&lt;/em&gt;,
a special directory set aside just for you that contains all your personal
files. To get there, do&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Like with other files, you can chain the tilde into paths:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/a_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;big-skip&quot;&gt;Play around with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pwd&lt;/code&gt; in your shell until you get comfortable
using them. They will be the bread and butter of your workflow, allowing you to
swim smoothly through your filesystem with minimal effort. It may feel awkward
now, but soon you’ll be faster with your terminal than the graphical
file explorers you’re used to.&lt;/p&gt;

&lt;h3 id=&quot;other-useful-commands&quot;&gt;Other useful commands&lt;/h3&gt;
&lt;p&gt;A few last ones to know before we wrap up:&lt;/p&gt;

&lt;p&gt;Moving files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv&lt;/code&gt;. It takes two arguments: a source and a destination.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;file.txt a_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; is now located in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_directory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv&lt;/code&gt; is also the most common way to rename files.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mv &lt;/span&gt;file.txt awesome.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;small-skip&quot;&gt;Because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesome.txt&lt;/code&gt; did not exist, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv&lt;/code&gt; went ahead and created a new file
called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesome.txt&lt;/code&gt; and transferred the contents of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; over,
effectively renaming the file.&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Copying files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt;. It also takes two arguments: a source and a destination.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;file.txt a_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There is now a copy of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a_directory&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If I want to copy an entire directory, I have to specify an extra option
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt;, which stands for “recursive.”&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; a_directory another_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If I wanted to copy a file or directory into my current working directory, I
can use the special symbol &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; &lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell small-skip highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cp&lt;/span&gt; /some/distant/file.txt &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Making directories: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkdir&lt;/code&gt;. It takes one argument: the name of the new directory.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;new_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;small-skip&quot;&gt;There’s is now a fresh &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_directory&lt;/code&gt; in our workspace.&lt;/p&gt;

&lt;p&gt;Removing files: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm&lt;/code&gt;. It takes one argument: the name of the file to be removed.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm &lt;/span&gt;file.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt; has now been consigned to the void.&lt;/p&gt;

&lt;p&gt;To remove directories, you’ll again need to specify a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-r&lt;/code&gt; to perform the operation
recursively.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; a_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s probably &lt;em&gt;the most dangerous&lt;/em&gt; command I’ve taught you. One careless
keystroke and your project is lost forever (&lt;a href=&quot;https://en.wikipedia.org/wiki/File_carving&quot;&gt;almost&lt;/a&gt;).
A much safer alternative is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rmdir&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rmdir &lt;/span&gt;a_directory
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;small-skip&quot;&gt;but the directory in question must be empty in order for the command to operate.
It’s an extra safety-precaution to ensure you don’t do anything stupid, and I
wholeheartedly advocate its use. But I get lazy too, and sometimes it’s just
easier to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -r&lt;/code&gt; things into oblivion.&lt;/p&gt;

&lt;p&gt;And finally, probably the most useful command you will ever use, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt;. It’s
short for “manual” and gives you a help page on any command. Forget how to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;? No problem:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man &lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Wanna learn more about &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man&lt;/code&gt; itself? It’s got you covered:&lt;/p&gt;

&lt;div class=&quot;language-shell small-skip highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;man man
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;These basic commands will probably be about 75 percent of everything you do
on a terminal. Again, things will feel awkward and slow at first, but give it
time. Before you know it, you’ll be a blazing wizard at the command line.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;If you’re interested in learning more, there’s tons of great resources out
there. If you’re using Mac or Linux, check out &lt;a href=&quot;http://linuxcommand.org/lc3_learning_the_shell.php&quot;&gt;this awesome guide&lt;/a&gt;.
For Windows PowerShell users, &lt;a href=&quot;https://www.varonis.com/blog/windows-powershell-tutorials/&quot;&gt;here’s a nice tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;looking-ahead&quot;&gt;Looking ahead&lt;/h2&gt;
&lt;p&gt;And that about wraps things up for part 1.&lt;/p&gt;

&lt;p&gt;You must be wondering, a whole blog post and not a single line of code in
sight? Instead, we wasted a whole lot of nothing on learning the command line.&lt;/p&gt;

&lt;p&gt;Why?&lt;/p&gt;

&lt;p&gt;Here’s the thing – programming is never just opening a magic program and
typing code that just works. It’s built with tools. These tools take time
to learn. What I’m teaching you are real tools that &lt;em&gt;real software engineers
use&lt;/em&gt;. No kiddy stuff here, we’re working with the real deal.&lt;/p&gt;

&lt;p&gt;What’s more, if you’re looking into a career in software, you’ll be learning
tools like these the rest of your life. Countless tools. Countless programs
they help write. We’ve started with the most common set that drives everything
else. Learn the command line, and you’re well on your way to mastering
&lt;em&gt;anything&lt;/em&gt; else.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Next time, we’ll start diving into actual code. Stay tuned, I’ll link
the post below as soon as it’s written.&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h3&gt;
&lt;p&gt;Here are some stray thoughts that didn’t make it into the normal flow of prose.
These are completely optional, but may add color to your reading.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;

      &lt;p&gt;That’s actually a half-lie. I got to school in New York. There’s plenty of
Financial Engineering majors on campus learning CS for Wall Street, but of
the dedicated, hard-core software folks I know, we’re all in it for the love. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;

      &lt;p&gt;In fact, there’s a programming language out there that looks exactly like
writing a recipe. It’s called &lt;a href=&quot;http://www.dangermouse.net/esoteric/chef.html&quot;&gt;chef&lt;/a&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;

      &lt;p&gt;I had a teacher once that used Vim for &lt;em&gt;everything&lt;/em&gt;. Lecture notes. Exams.
Homework. Love letters to his wife. You name it, he used Vim to write it.&lt;/p&gt;

      &lt;p&gt;Maybe not actually the love letters, but everything else, I promise. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;

      &lt;p&gt;The commands I’ll outlining are with a shell called Bash. It’s popular on
Linux and macOS. If you’re using Windows’ PowerShell, the commands should
still work, but you can find their proper equivalents &lt;a href=&quot;http://ilovepowershell.com/2011/11/03/list-of-top-powershell-alias/&quot;&gt;here&lt;/a&gt; &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;

      &lt;p&gt;BE CAREFUL THOUGH! If &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;awesome.txt&lt;/code&gt; really did exist before, I would have
overwritten its original content with that of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;file.txt&lt;/code&gt;. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;

      &lt;p&gt;In summary, there are 3 special symbols we talked about: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;.
Each of them are like a shorthand for a path. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;..&lt;/code&gt; represents the directory
above. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~&lt;/code&gt; represents the home directory, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt; represents the current
working directory. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;

      &lt;p&gt;Still on its way, I promise! &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>William L. Tong</name></author><category term="education" /><summary type="html">If you’ve always wanted to learn how to program, but never know where to start, you’re in the right place. Start here. Today is the first day of your glorious programming future. Audience: curious folks interested in programming</summary></entry><entry><title type="html">From 1011 to Laptop: How to build a computer from binary</title><link href="http://localhost:4000/_site/tech/2019/01/12/from-1011-to-laptop-how-to-build-a-computer-from-binary.html" rel="alternate" type="text/html" title="From 1011 to Laptop: How to build a computer from binary" /><published>2019-01-12T21:29:00-06:00</published><updated>2019-01-12T21:29:00-06:00</updated><id>http://localhost:4000/_site/tech/2019/01/12/from-1011-to-laptop-how-to-build-a-computer-from-binary</id><content type="html" xml:base="http://localhost:4000/_site/tech/2019/01/12/from-1011-to-laptop-how-to-build-a-computer-from-binary.html">&lt;p&gt;How exactly do computers work? How do you go from simple electrical impulses to
this incredible wonder-box? Tucked beneath our palms, in our pockets, and on our
desks are veritable miracles of delicate wiring and clever engineering. For the
next few minutes, I’ll take you on a whirlwind tour: from simple 1’s and 0’s to
the whole, hulking beast that we call a computer.&lt;/p&gt;

&lt;p class=&quot;intro&quot;&gt;&lt;em&gt;Audience: anyone and everyone&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/from-1011-to-laptop/iconic_computer.png&quot; alt=&quot;Source: https://en.wikipedia.org/wiki/Desktop_computer&quot; /&gt;
    &lt;figcaption&gt;Source: https://en.wikipedia.org/wiki/Desktop_computer&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Look here.&lt;/p&gt;

&lt;p&gt;Well, not &lt;em&gt;here&lt;/em&gt; here, exactly, but &lt;strong&gt;here&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The screen, I mean.&lt;/p&gt;

&lt;p&gt;And more importantly, the machine it’s attached to. Beneath the surface buzzes a sea
of electricity, performing calculations that might take you a month — in &lt;strong&gt;one second&lt;/strong&gt;*.&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Today, you will learn how this magic works, and it all starts with a simple switch.&lt;/p&gt;

&lt;h3 id=&quot;on-and-off&quot;&gt;On and off&lt;/h3&gt;
&lt;p&gt;Consider the modern household light-switch. Flick it up. Light! Flick it down.
Dark! Profound stuff, I know. Let’s put it in at table:&lt;/p&gt;

&lt;table class=&quot;small-skip&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;switch&lt;/th&gt;
      &lt;th&gt;light&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;up&lt;/td&gt;
      &lt;td&gt;on&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;down&lt;/td&gt;
      &lt;td&gt;off&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;What happens if we add a little extra machinery to it? Now, when you flick it
up, it turns the light &lt;strong&gt;off&lt;/strong&gt;. When you flick it down, it turns the light &lt;strong&gt;on&lt;/strong&gt;.
Basically the reverse of our original light switch. Let’s call it a &lt;em&gt;“NOT switch”&lt;/em&gt;,
because it does the opposite of our original. It’s table looks like this:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;switch&lt;/th&gt;
      &lt;th&gt;light&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;up&lt;/td&gt;
      &lt;td&gt;off&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;down&lt;/td&gt;
      &lt;td&gt;on&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;My hands are getting a little tired typing “up” and “off”. Why don’t we use a
shorthand: let’s say “1” means “up” or “on,” and “0” means “down” or “off”? Our
NOT switch table might look like this:&lt;/p&gt;

&lt;table class=&quot;small-skip&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;switch&lt;/th&gt;
      &lt;th&gt;light&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Let’s do something fancier. Say we have two switches connected to a single
light-bulb: switch A and B. When A &lt;strong&gt;and&lt;/strong&gt; B are flicked up, the light turns
on. Otherwise, the light stays off. Let’s call it an &lt;em&gt;“AND switch”&lt;/em&gt;:&lt;/p&gt;

&lt;table class=&quot;small-skip&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;light&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Now what if we have the opposite? If A &lt;strong&gt;or&lt;/strong&gt; B (or both) are flicked up, the
light turns on. Otherwise, when neither switch is up, the light stays off. Why
don’t we call this one an &lt;em&gt;“OR switch”&lt;/em&gt;:&lt;/p&gt;

&lt;table class=&quot;small-skip&quot;&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;A&lt;/th&gt;
      &lt;th&gt;B&lt;/th&gt;
      &lt;th&gt;light&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;And there we have it. These three switches — NOT, AND, OR — are the
fundamental building blocks of computers. In the field, they’re called
&lt;em&gt;logic gates&lt;/em&gt;. They’re not actually light-switches or bulbs, but wires carrying
electricity. When electricity flows through a wire, it’s called a “1”. When
it doesn’t, you have a “0”.&lt;/p&gt;

&lt;p&gt;The logic gate itself is kind of like a microscopic box with wires sticking out.
If electricity flows into the wire going &lt;em&gt;in&lt;/em&gt; to a NOT gate, no electricity will
flow through the wire pointing &lt;em&gt;out&lt;/em&gt;. Similarly if you have electricity flowing
down two wires going &lt;em&gt;in&lt;/em&gt; to an AND gate, electricity will also flow &lt;em&gt;out&lt;/em&gt; of the
AND gate.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;By etching circuit boards into logic gates and roping these into larger and
larger circuits, you can build just about any digital device.&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;binary&quot;&gt;Binary&lt;/h3&gt;
&lt;p&gt;Before we move on to building circuits, let’s pause for a moment and consider:
what can we actually do with just 1’s and 0’s? What about letters? Words?
Images?&lt;/p&gt;

&lt;p&gt;Let’s start easy and look at just numbers. We have 0. We have 1. What about the
other 8 digits? I have a clever idea. Check this out:&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;100&lt;/td&gt;
      &lt;td&gt;101&lt;/td&gt;
      &lt;td&gt;110&lt;/td&gt;
      &lt;td&gt;111&lt;/td&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;1001&lt;/td&gt;
      &lt;td&gt;1010&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;0 matches 0 and 1 matches 1. So far so good. But 2 = 10???&lt;/p&gt;

&lt;p&gt;The key is to dissect the value “10” into component pieces. The number itself
is composed of two digits, a 1 on the right and a 0 on the left. Imagine that
the “1” on the right gets associated with $2^1$, and the “0”” on the left
gets associated with $2^0$. Then let’s compute:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{1} \times 2^1 + \mathbf{0} \times 2^0 = \mathbf{2}&lt;/script&gt;

&lt;p&gt;The bolded values on the left are smooshed together to form our representation
using just 1’s and 0’s — called &lt;em&gt;binary&lt;/em&gt;. The value on the right is the
familiar number we’re trying to represent.&lt;/p&gt;

&lt;p&gt;Confused? Let’s try again with “3”. To get “3”, I wrote “11” above. If we walk
through the same process, that means:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{1} \times 2^1 + \mathbf{1} \times 2^0 = \mathbf{3}&lt;/script&gt;

&lt;p&gt;which checks out.&lt;/p&gt;

&lt;p&gt;Now let’s do 4. But hang on, there’s more than 2 binary digits.&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; Let’s have
the new digit on the left associated with $2^2$, the middle be $2^1$, and the far
right remain $2^0$. We then have:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{1} \times 2^2 + \mathbf{0} \times 2^1 + \mathbf{0} \times 2^0 = \mathbf{4}&lt;/script&gt;

&lt;p&gt;Do you see a pattern?.&lt;/p&gt;

&lt;p&gt;As we keep tagging on digits to the left, the power of 2 increases. So with
“1110”, we would have:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{1} \times 2^3 + \mathbf{1} \times 2^2 + \mathbf{0} \times 2^1 + \mathbf{1} \times 2^0 = \mathbf{13}&lt;/script&gt;

&lt;p class=&quot;small-skip&quot;&gt;So the value “13” is represented as “1101” in binary.&lt;/p&gt;

&lt;p&gt;Why do things this way? Remember from grade school learning about the “ones
place”, the “tens place”, and the “hundreds place”? The number “356” for example
has a “3” in the hundreds place, a “5” in the tens place, and a “6” in the ones place.
It can be written like this:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{3} \times 10^2 + \mathbf{5} \times 10^1 + \mathbf{6} \times 10^0 = \mathbf{356}&lt;/script&gt;

&lt;p&gt;We’re doing the exact same thing except instead of “hundreds” and “tens”,
we’re working with “fours” and “twos.” Because in binary, we’re limited to
just two numbers rather than 10, our “places” count off as powers of 2 rather
than powers of 10. Forming the number “5” in binary therefore requires a
“1” in the fours place, a “0” in the twos place, and a “1” in the ones place,
so 5 in binary would be “101”.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;Don’t be worried if it doesn’t click right away. It takes some time to grok.
Sit with it a little. Take a walk. When you’re showering tomorrow morning
it’ll all become clear like magic. In the meanwhile, &lt;a href=&quot;https://ryanstutorials.net/binary-tutorial/&quot;&gt;here’s an excellent guide&lt;/a&gt; going into the concept with more depth.&lt;/p&gt;

&lt;p&gt;Once you can represent numbers with 1’s and 0’s, the rest is just gravy. Just
about every other form of data can be represented numerically.
Letters? Easy. &lt;a href=&quot;https://unicode-table.com/en/&quot;&gt;Unicode&lt;/a&gt; is a system mapping
letters (English or otherwise) to numbers. Once you have letters, you can
string&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; them together to make words. Images are a little tricker. One way
is to assign 3 numbers to each pixel, where the numbers represent the
&lt;a href=&quot;https://www.w3schools.com/colors/colors_rgb.asp&quot;&gt;RGB&lt;/a&gt; values of a color.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Audio, video, programs, all of it can be similarly encoded with numbers (and
therefore also with binary). I’ll leave it up to Google to show you how.&lt;/p&gt;

&lt;h3 id=&quot;components&quot;&gt;Components&lt;/h3&gt;
&lt;p class=&quot;small-skip&quot;&gt;We have logic gates. We have binary. We’re now ready to build the actual beast.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/from-1011-to-laptop/von_neumann.png&quot; alt=&quot;Source: https://en.wikipedia.org/wiki/Von_Neumann_architecture&quot; /&gt;
    &lt;figcaption&gt;Source: https://en.wikipedia.org/wiki/Von_Neumann_architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;small-skip&quot;&gt;Computers have four basic components: CPU, memory, input, and output. The CPU,
short for “central processing unit,” is like a souped-up calculator. It’s hooked
to memory, which allows it to store and load data, as well as input and output (I/O)
devices like your keyboard, monitor, and speakers. In the next few sections,
we’ll go more depth into CPU and memory. I/O gets a little messy. I’ll
touch on it a little, but will save the meat for a future post.&lt;/p&gt;

&lt;h4 id=&quot;processor&quot;&gt;Processor&lt;/h4&gt;
&lt;p&gt;The CPU (and memory) can be expressed as one, giant, virtually-unimaginably
complex web of AND, OR, and NOT logic gates. Check it out:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/from-1011-to-laptop/complicated_schematic.png&quot; alt=&quot;Source: http://www.sciencegeek.net/Biology/Presentations/Respiration/&quot; /&gt;
    &lt;figcaption&gt;Source: http://www.sciencegeek.net/Biology/Presentations/Respiration/&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;small-skip&quot;&gt;Just kidding — that’s something different. At the risk of offending biologists,
I claim that, believe it or not, the intricacies in your laptop are just as
complicated, if not more so, than the above.&lt;/p&gt;

&lt;p&gt;To deal with all that complexity, computer engineers use layer upon layer upon
layer of abstraction: using logic gates to build simple components, then
using simple components to build more complex systems, working up until we’ve
got a functioning laptop.&lt;/p&gt;

&lt;p&gt;One simple component in the processor is called the “adder”. It adds. Go figure.
And it looks something like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/from-1011-to-laptop/adder.png&quot; alt=&quot;Source: me&quot; /&gt;
    &lt;figcaption&gt;Source: me&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p class=&quot;small-skip&quot;&gt;You take two numbers (in binary), feed them to A and B, and out crunches your
answer (also in binary).&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt; Additional I/O circuitry can be crafted from more
logic gates to convert familiar numbers into binary, and from binary back
to familiar numbers, but we don’t need them just yet.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;With the adder, you can rope in additional logic gates to perform other operations
like subtraction and &lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operation&quot;&gt;bit shifts&lt;/a&gt;.
The end result is called an Arithmetic Logic Unit (ALU).&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; Together with
additional logic gates to connect it to memory and I/O, the ALU and supporting
infrastructure makes up the central processing unit.&lt;/p&gt;

&lt;h4 id=&quot;memory&quot;&gt;Memory&lt;/h4&gt;
&lt;p&gt;Up until this point, we can add and we can subtract. We’re basically a calculator.
The magic ingredient that boosts us into Computerhood is memory.&lt;/p&gt;

&lt;p&gt;The fundamental circuit of memory is called a &lt;a href=&quot;https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot;&gt;latch&lt;/a&gt;.
It’s made of two NOR gates (like OR, with a NOT gate in front) hooked together
cleverly so that the circuit “remembers” the last value inputted. Below is a
neat graphic stolen from the Wikipedia page illustrating how this works:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/from-1011-to-laptop/latch.gif&quot; alt=&quot;Source: https://en.wikipedia.org/wiki/Flip-flop_(electronics)&quot; /&gt;
    &lt;figcaption&gt;Source: https://en.wikipedia.org/wiki/Flip-flop_(electronics)&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The weird shapes that look like fishes are the NOR gates, with two inputs
on the left and one output on the right.&lt;/p&gt;

&lt;p&gt;The circuit stores exactly 1 bit: either a 1 or a 0. It’s in the “1” state when
the “Q” output lights up. It’s in the “0” state when the other output, called
“Q bar”, lights up. The “R” stands for “reset”: triggering it causes the
circuit to store a “0” (i.e. Q-bar lights up). The “S” stands for “set”. Sending
a current to this input will tell the circuit to store a “1,” causing Q to light
up. When neither input is triggered, the circuit will hold its state — so if it
was storing a “0”, it will continue to store a “0” until the “S” gets triggered.
If both inputs are triggered simultaneously, &lt;strong&gt;kabloosh&lt;/strong&gt; the world explodes.&lt;/p&gt;

&lt;p&gt;Just kidding. Formally, when both R and S are triggered, the behavior is
&lt;a href=&quot;http://www.catb.org/jargon/html/N/nasal-demons.html&quot;&gt;undefined&lt;/a&gt;. In practice,
that means it’ll never happen.&lt;/p&gt;

&lt;p&gt;Using the above circuit, we can store exactly 1 binary digit. If you’re reading
this on a standard laptop, your machine probably has a memory of about 8 gigabytes, or
over 8 &lt;em&gt;billion&lt;/em&gt; bits. 8 billion of those little circuits, clicking on and
off a bajillion times each second to store your computer data.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;In reality, to make computer memory cheap, it looks a little different than
pictured, but the principle is the same. Take a bunch of those circuits. Rope
them into giant chunks. Feed to your CPU for data storage.&lt;/p&gt;

&lt;h4 id=&quot;io&quot;&gt;I/O&lt;/h4&gt;
&lt;p&gt;I/O gets super complicated super fast, so we’ll focus on just one, tiny, specific
sliver: encoders and decoders.&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Remember from earlier, when we were talking about the adder, how it takes input
as binary and spits out a binary result? For a computer, binary is awesome. For
a human, WTF. Your TI-84 would be practically useless if all it gave was binary.&lt;/p&gt;

&lt;p&gt;To help computers read and output human-friendly symbols, we use special circuits
called decoders and encoders.&lt;/p&gt;

&lt;p&gt;A decoder “decodes” binary into human symbols. It’s a box that looks something
like this:&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/from-1011-to-laptop/decoder.png&quot; alt=&quot;Source: me&quot; /&gt;
    &lt;figcaption&gt;Source: me&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The inner circuitry is a mess of AND and NOT gates, but let’s focus on just a clean,
plain box. Going in is your binary output. Exactly one of the outputs will be
triggered.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;To make this happen, it manually maps each possible binary input to an output.
For example, we know the binary “101” represents the value “5”. We could
hook up a decoder such that feeding in the binary “101” will trigger the
output that sends electricity to a big sign that says “5”. Brute-force, but
that’s how your calculator translates “101 + 100” to “9”&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Encoders are the reverse. They take something human-readable, and encode it
into binary. Take a look at your keyboard. How does
your laptop know that, when you press the key “A,” it should type the letter
“a”? The moment your finger presses the key, the wire underneath picks up the
signal and brings it to an encoder, where it trickles through a mess of logic
gates and eventually outputs “101111001…” for your CPU to handle.&lt;/p&gt;

&lt;h3 id=&quot;programs&quot;&gt;Programs&lt;/h3&gt;
&lt;p&gt;Congrats. At this point, you have a legitimate computer: CPU, memory, I/O. Press
the power button and — a blank screen.&lt;/p&gt;

&lt;p&gt;What’s missing?&lt;/p&gt;

&lt;p&gt;Software.&lt;/p&gt;

&lt;p class=&quot;small-skip&quot;&gt;Otherwise, all you’ve got is a hunk of expensive, intricate metal. We need a
software soul to bring our digital Frankenstein to life.&lt;/p&gt;

&lt;p&gt;At its most fundamental, software is simply a stream of 1’s and 0’s. Remember
a computer can only understand binary. To tell the CPU to
do anything, you need to give the instructions in binary. Want to print
 “Hello World” to the screen? It might look like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1101010100101010101010010101100101011111101010`11111100010001001
0000110101010010101010101001011101010100101010101010011111111111
0000000000001111111010101001010101010100101011110101010010101010
1110000000000011111110000000000000000001111111110101010100101111
1101010111 # ... and thousands more lines ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In this primitive form, it’s called “machine code”. Imagine trying to
write a program like that. It’s tedious. It’s error prone. It’s stupid for
any self-respecting programmer to try.&lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;To make things easier, early coders developed a system called &lt;em&gt;assembly&lt;/em&gt;. Instead
of hand writing 1’s and 0’s, they used short mnemonics instead. A special
program called an &lt;em&gt;assembler&lt;/em&gt; then converts the mnemonics to machine code. It looks
something like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;addi    $a0, $a0, 4
addi    $a1, $a1, 4
jal AddAndVerify

lw      $ra, 12($sp)
lw      $a0, 8($sp)
lw      $a1, 4($sp)
lw      $a2, 0($sp)
addi    $sp, $sp, 16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks better. Still not brilliant.&lt;/p&gt;

&lt;p&gt;The real jump came when computer scientists invented &lt;em&gt;compilers&lt;/em&gt;. These are
special programs that take a human-readable text file, and “compiles” it into
machine code or assembly. For example, you might write something like:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It’s written in a programming language called “C”.&lt;sup id=&quot;fnref:11&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; Feed it to a compiler,
and we’ll get thousands of lines worth of 1’s and 0’s that will tell our
laptop to print “Hello world!”&lt;/p&gt;

&lt;p&gt;If you’re familiar with other languages like Java, the principle is the same.
You take a simple text file written in readable English, then give it to a special
program that translates the English into the binary a computer can understand.&lt;/p&gt;

&lt;p&gt;Once the software is written, to get it into the machine, the 1’s and 0’s are
stored in memory. When a program is run, the CPU pulls the instructions
line-by-line from memory, and executes whatever the binary tells it to.&lt;/p&gt;

&lt;p&gt;One especially important program is the &lt;em&gt;operating system&lt;/em&gt; (OS). It’s
the program that drives your laptop or mobile device. Nearly everything you
touch depends on the OS. The desktop. The home screen. The file explorer. The
login system. Even the other programs we rely on — our Internet browser, word
processor, messaging apps — these are programs that run on top of the OS,
relying on the operating system to function. Common ones you might know include
Microsoft Windows, macOS, and Linux (the mobile OS “Android” is a flavor of
Linux).&lt;/p&gt;

&lt;p&gt;Here’s a problem to leave you with: operating systems, like any other programs,
are written on a computer. A developer turns on their laptop, opens up a text file, types in millions
of lines of code, saves, compiles, and you have &lt;a href=&quot;https://github.com/torvalds/linux&quot;&gt;Linux&lt;/a&gt;
(or Windows or macOS). But to use the computer in the first place, you need
an operating system.&lt;/p&gt;

&lt;p&gt;Huh.&lt;/p&gt;

&lt;p&gt;You need an OS to use the laptop, but you need a laptop to write the OS.&lt;/p&gt;

&lt;p&gt;So which came first?&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/from-1011-to-laptop/chicken_egg.jpg&quot; alt=&quot;Source: http://signlanguageco.com/the-chicken-and-the-egg-and-the-interpreter/&quot; /&gt;
    &lt;figcaption&gt;Source: http://signlanguageco.com/the-chicken-and-the-egg-and-the-interpreter/&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h3&gt;
&lt;p&gt;And there you have. From logic gates to binary to hardware to software, we’ve
done it. A complete computer.&lt;/p&gt;

&lt;p&gt;I’ve touched the high points, but there’s a ton I left out. If you’re deeply interested
in the material and want to learn more, I can’t recommend enough, &lt;a href=&quot;https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319&quot;&gt;Code by Charles Petzold&lt;/a&gt;. I’m not being paid to recommend it. It’s simply
a fantastic tour from absolute fundamentals to a fully-fledged machine. Be
prepared to have your mind blown.&lt;/p&gt;

&lt;p&gt;If you’re even &lt;em&gt;more&lt;/em&gt; interested in computers, it’s never too late (or too
early) to consider a career in Computer Science. There are roughly three, broad routes
you can take:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;High level&lt;/strong&gt; (software engineer, UIUX designer): Write code. Have fun.
Get paid lots. These are the guys writing apps, building websites, doing the
programming that most often gets associated with CS.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Low level&lt;/strong&gt; (systems programmer, computer engineer, electrical engineer): Most
of this article covered the low level functions of a computer. If you found it
wildly interesting, you might enjoy working in the area, designing computers
from basic circuits and writing code that runs &lt;a href=&quot;https://www.quora.com/What-does-it-mean-for-a-programming-language-to-be-closer-to-the-metal&quot;&gt;close to the metal&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Theory&lt;/strong&gt; (scientists, researchers): Maybe the true “computer scientist,” these
guys push the math and models to figure out even more epic ways of computing.
Machine Learning is also a hot-spot in this area.&lt;/li&gt;
&lt;/ol&gt;

&lt;p class=&quot;big-skip&quot;&gt;I’m biased when I say this, but there’s really endless opportunity in CS. There’s
art. There’s engineering. There’s fun. Google is an awesome place to &lt;a href=&quot;https://www.google.com/search?q=learn+python&amp;amp;oq=learn+python&quot;&gt;start&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;footnotes&quot;&gt;Footnotes&lt;/h4&gt;

&lt;p&gt;These footnotes contain information above and beyond the information presented
in text. They assume a more technical background than the main article, but with
the power of Google, I’m confident anyone can get the gist.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;

      &lt;p&gt;How did I get these numbers? Let’s assume a super basic processor (by 2019
standards) that trucks along at a mighty 330 thousand instructions per second.
This number is stolen from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Intel_8086&quot;&gt;Intel 8086&lt;/a&gt;
microprocessor, the chip driving the original IBM PC and whose design likely graces
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x86_64&lt;/code&gt; architecture of your own laptop’s processor. From here, let’s
say it takes a human on average 5 seconds to process a single instruction.
I’m being hand-wavy since an instruction like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; might take a human
many more seconds to crunch, but an instruction like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lw&lt;/code&gt; (load word) might
mean instantaneously recalling a particular value. It’s an imperfect
measure, but we’ll stick with it as a super rough guess.&lt;/p&gt;

      &lt;p&gt;Playing with the numbers, a human would take $33000 \times 5 = 1.65$
&lt;em&gt;million&lt;/em&gt; seconds, or about &lt;strong&gt;460 hours&lt;/strong&gt; to crunch through those
instructions. Assuming no breaks, no food, no sleep, this is equal to about
&lt;strong&gt;19 days&lt;/strong&gt;.&lt;/p&gt;

      &lt;p&gt;Also keep in mind the 8086 processor was top-of-the-line — in 1978. The processor
in your phone is several orders of magnitude faster. What takes your smartphone one
second to crunch, might very well take you more than a year. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;

      &lt;p&gt;In total, there are 7 commonly used logic gates: the three we covered, plus
NAND, NOR, XOR, and XNOR. All gates with a big “N” mean they’re formed by
combining the respective gate with a NOT. So a NAND would be an AND gate
with the output negated by NOT. XOR is short of “eXclusive OR”. It’s the
exact same thing as an OR gate except two one inputs yields a zero — that is,
it triggers only when one input is &lt;em&gt;exclusively&lt;/em&gt; turned one.&lt;/p&gt;

      &lt;p&gt;But the big three to know are NOT, AND, and OR. Using them, you can build any
of the other four.&lt;/p&gt;

      &lt;p&gt;Bonus fact: using exclusively NAND gates, you can construct a NOT, AND, and
OR. Same goes for NOR. The implication is that any and all circuits built
with logic gates can be constructed solely from NAND or NOR gates. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;

      &lt;p&gt;&lt;em&gt;Binary digit&lt;/em&gt;: you might have heard of them, the name is sometimes shortened
to just &lt;em&gt;“bits”&lt;/em&gt; &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;

      &lt;p&gt;Our familiar “0” through “9” counting system is called &lt;em&gt;decimal&lt;/em&gt;. Two other
common systems to know, especially if you’re in computer science, are
&lt;em&gt;octal&lt;/em&gt; (8 digits “0” through “7”) and “hexadecimal” (16 digits “0” through
“F”). Because hexadecimal requires more symbols than our 10-symbol counting
system can handle, values “10” through “15” are represented using the letters
“A” through “F” instead. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;

      &lt;p&gt;Pun very much intended. &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;

      &lt;p&gt;For the sake of space, I’ll skip over many of the nitty-gritty details behind
the systems I’ll be describing. If you’re super into this stuff, I highly
recommend &lt;a href=&quot;https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319&quot;&gt;Code by Charles Petzold&lt;/a&gt;. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;

      &lt;p&gt;How you wire logic gates together to pull off this feat is a little beyond us.
If your curious, you can learn about those details on &lt;a href=&quot;https://en.wikipedia.org/wiki/Adder_(electronics)&quot;&gt;Wikipedia&lt;/a&gt;.
If you decide to learn more, you’ll notice that I’ve also simplified the
picture of the adder. More correctly, it should include inputs and
outputs for the carry bits. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;

      &lt;p&gt;A guy once made an ALU with redstone in Minecraft. Check it out: &lt;a href=&quot;https://www.youtube.com/watch?v=LGkkyKZVzug&quot;&gt;https://www.youtube.com/watch?v=LGkkyKZVzug&lt;/a&gt; &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;

      &lt;p&gt;In practice, encoders and decoders are fundamental circuits used in far more
than just I/O. In fact, they feature prominently in your CPU’s architecture,
and are crucial building blocks of computer design. &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot;&gt;

      &lt;p&gt;Not entirely true. Super-caliber hackers will sometimes write machine code
to slip an exploit around a security system. &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:11&quot;&gt;

      &lt;p&gt;C, by the way, is the language that runs the world. Literally. Your phone,
your laptop, embedded systems you never knew existed, all of it runs on
software written mostly in C (or it’s controversial child, C++). &lt;a href=&quot;#fnref:11&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>William L. Tong</name></author><category term="education" /><summary type="html">How exactly do computers work? How do you go from simple electrical impulses to this incredible wonder-box? Tucked beneath our palms, in our pockets, and on our desks are veritable miracles of delicate wiring and clever engineering. For the next few minutes, I’ll take you on a whirlwind tour: from simple 1’s and 0’s to the whole, hulking beast that we call a computer. Audience: anyone and everyone</summary></entry><entry><title type="html">Getting started with Jekyll</title><link href="http://localhost:4000/_site/tech/2019/01/04/getting-started-with-jekyll.html" rel="alternate" type="text/html" title="Getting started with Jekyll" /><published>2019-01-04T19:39:00-06:00</published><updated>2019-01-04T19:39:00-06:00</updated><id>http://localhost:4000/_site/tech/2019/01/04/getting-started-with-jekyll</id><content type="html" xml:base="http://localhost:4000/_site/tech/2019/01/04/getting-started-with-jekyll.html">&lt;p&gt;A simple guide to setting up a Jekyll installation. Existing documentation left
some pieces out, so I’ve put together this document to guide anyone else (and
my future self) through the process.&lt;/p&gt;

&lt;p class=&quot;intro&quot;&gt;&lt;em&gt;Audience: tech-oriented folks comfortable on the command line&lt;/em&gt;&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&quot;/_site/assets/getting-started-with-jekyll/jekyll_logo.png&quot; alt=&quot;Source: https://github.com/jekyll/brand&quot; /&gt;
    &lt;figcaption&gt;Source: https://github.com/jekyll/brand&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Jekyll is a &lt;em&gt;static website generator&lt;/em&gt;. It doesn’t host. It doesn’t create
content. It’s a clean, simple machine that you feed text and out pops magically
formed HTML. It’s “blog aware”, so it includes clever tools and short-cuts for
bloggers — but don’t feel limited. You can use it to build portfolios, documentation
sites, tech showcases, anything you can dream. If you’re a tech-friendly blogger
ready to get your hands dirty with a little web dev, Jekyll is perfect for you.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;First things first, to follow this guide, you’ll need a *nix system (Mac, Linux)
and be okay with command-line stuff. Personally, I run an Arch Linux based
distribution, so my examples are geared towards my home system. Your mileage
may vary.&lt;/p&gt;

&lt;h3 id=&quot;initial-steps&quot;&gt;Initial steps&lt;/h3&gt;
&lt;p&gt;Jekyll is written in Ruby. To use it, you’ll need a &lt;a href=&quot;https://www.ruby-lang.org/en/downloads/&quot;&gt;Ruby installation&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Me, on Arch Linux&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; ruby

&lt;span class=&quot;c&quot;&gt;# Debian, Ubuntu&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby

&lt;span class=&quot;c&quot;&gt;# Mac&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To verify your installation, go ahead and check:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ruby &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, we’ll need Bundler:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;small-skip&quot;&gt;In Ruby, &lt;a href=&quot;https://en.wikipedia.org/wiki/RubyGems&quot;&gt;gems&lt;/a&gt; are packaged pieces of code,
like .jar files for Java or modules for Python. Bundler is a utility that
makes managing gems possible with minimum teeth-gnashing and hair loss.&lt;/p&gt;

&lt;p&gt;Bundler itself will have been installed in your gem user installation directory.
To see where that is, do:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem &lt;span class=&quot;nb&quot;&gt;env
&lt;/span&gt;RubyGems Environment:
  - RUBYGEMS VERSION: 2.7.7
  - RUBY VERSION: 2.5.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2018-10-18 patchlevel 105&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;x86_64-linux]
  - INSTALLATION DIRECTORY: /usr/lib/ruby/gems/2.5.0
  - USER INSTALLATION DIRECTORY: /home/username/.gem/ruby/2.5.0
&lt;span class=&quot;c&quot;&gt;# ... and lots more&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And that line at the bottom that says “USER INSTALLATION DIRECTORY” is your
ticket. Add that file path to your environment PATH variable to use Bundler
on the command line.&lt;/p&gt;

&lt;p&gt;For me, in place of [USER INSTALLATION DIRECTORY],
I’d put &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/home/username/.gem/ruby/2.5.0&lt;/code&gt;. Note the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bin&lt;/code&gt; appended to the path:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Using bash (note: you do not need an &quot;export&quot;):&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:[USER INSTALLATION DIRECTORY]/bin

&lt;span class=&quot;c&quot;&gt;# Using fish, my preferred shell:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-gx&lt;/span&gt; PATH &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;USER INSTALLATION DIRECTORY]/bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;big-skip&quot;&gt;To make the change permanent, add that command to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.profile&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bash_profile&lt;/code&gt;),
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config.fish&lt;/code&gt;, or whatever you use for setting environment variables. Restart your
shell to allow the change to take effect.&lt;/p&gt;

&lt;h3 id=&quot;installing-jekyll&quot;&gt;Installing Jekyll&lt;/h3&gt;
&lt;p&gt;Now, we’re in shape for grabbing Jekyll. In preparation, we need to tell Bundler
to install gems in the same default directory as RubyGem:&lt;/p&gt;
&lt;div class=&quot;language-shell small-skip highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle config path &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;USER INSTALLATION DIRECTORY]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next, Bundler needs a special file called a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt; to begin installing gems.
Go ahead and make one and copy the following into it:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source 'https://rubygems.org'
gem 'github-pages', group: :jekyll_plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Then to execute, in the &lt;strong&gt;same directory as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;&lt;/strong&gt;, do:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;install
&lt;/span&gt;Fetching gem metadata from https://rubygems.org/............
Fetching version metadata from https://rubygems.org/...
Fetching dependency metadata from https://rubygems.org/..
Resolving dependencies...
&lt;span class=&quot;c&quot;&gt;# ... and lots more ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p class=&quot;small-skip&quot;&gt;Now sit back and relax. It’ll take a few minutes to run, installing Jekyll along
with a whole hog of useful plugins for the Jekyll + GitHub marriage.&lt;/p&gt;

&lt;p&gt;After installation completes, make a new blog site and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd&lt;/code&gt; into it:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll new myblog
&lt;span class=&quot;c&quot;&gt;# ... output from jekyll ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we’re now in the directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myblog&lt;/code&gt;. To test your newly minted blog, do:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This command will compile your Jekyll files into fully-formed HTML, place them in the
directory &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt;, and host these files off a development server. To check
out the website, open your favorite browser and navigate to &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;big-skip&quot;&gt;Note: remember to prepend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec&lt;/code&gt; to every &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; command you execute.
Doing so tells &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll&lt;/code&gt; to run using gems installed by Bundler. So when the
documentation tells you to do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;, you should instead do
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;looking-ahead&quot;&gt;Looking ahead&lt;/h3&gt;
&lt;p class=&quot;small-skip&quot;&gt;And now, you’re the proud owner of a beautiful, minimal-functioning blog! But
it’s still a ton of work to get from here to the fabulous work of
social-media-art your have in mind. On your journey, you will need to:&lt;/p&gt;

&lt;h4 id=&quot;learn-how-jekyll-works&quot;&gt;Learn how Jekyll works&lt;/h4&gt;
&lt;p class=&quot;small-skip&quot;&gt;Get your hands dirty in the details of Jekyll with the official
&lt;a href=&quot;https://jekyllrb.com/docs/step-by-step/02-liquid/&quot;&gt;step-by-step guide&lt;/a&gt;. It
covers things like the &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid&lt;/a&gt; template
language for shnazzing up your HTML, the mechanics of the site generator, and
deploying to &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;host-on-github-pages&quot;&gt;Host on Github pages&lt;/h4&gt;
&lt;p class=&quot;small-skip&quot;&gt;Speaking of GitHub Pages, when you’re ready to show the world your hard work,
it’s time to publish on the Interwebs. Make sure you familiarize yourself with
the basics of &lt;a href=&quot;https://guides.github.com/activities/hello-world/&quot;&gt;Github&lt;/a&gt; and
&lt;a href=&quot;https://git-scm.com/docs/gittutorial&quot;&gt;git version control&lt;/a&gt;. Then start a
&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; repository to host your site. Pick
a catchy &lt;a href=&quot;https://domains.google&quot;&gt;domain name&lt;/a&gt; to polish.&lt;/p&gt;

&lt;h4 id=&quot;play-with-themes&quot;&gt;Play with themes&lt;/h4&gt;
&lt;p class=&quot;small-skip&quot;&gt;The default theme generated by Jekyll is &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;minima&lt;/a&gt;.
I like it. I used it as a starting base for this site. But for those seeking
a more sublime theme experience, there’s &lt;a href=&quot;https://jekyllthemes.io/&quot;&gt;this beauty&lt;/a&gt;,
plenty more on Google, or dream up your own.&lt;/p&gt;

&lt;p&gt;Happy blogging!&lt;/p&gt;</content><author><name>William L. Tong</name></author><category term="howto" /><summary type="html">A simple guide to setting up a Jekyll installation. Existing documentation left some pieces out, so I’ve put together this document to guide anyone else (and my future self) through the process. Audience: tech-oriented folks comfortable on the command line</summary></entry></feed>